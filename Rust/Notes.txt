Project Creation and Management:
Create project by running `cargo new <project name (name should be snakeCase)>`
Build project by running `cargo build` in the project root directory.
Run project by running `cargo run` in the project root directory.

To 'check' your project, run `cargo check` in the project root directory. This will check for errors without building the project.

Format your code automatically by `rustfmt <pathToFile>`

Variables Constants and Shadowing:
Variables are immutable by default. To make a variable mutable, use the `mut` keyword.
Use `let` to implicitly declare a variable.
To explicitly declare a type:
    let <variableName>: <type> = <value>
    let x: i32 = 5; // X, of type 32-bit int, is set to 5.

We can create a scope by simply using {} and everything in there will be part of that scope only.

Data Types:
The primitive data types are as follows:
    Integers (default is i32):
        i8, i16, i32, i64, i128 (Signed)
        u8, u16, u32, u64, u128 (Unsigned)
    Floats (default is f64):
        f32: Single precision
        f64: Double precision
    Booleans:
        bool: true or false
        You could also use 1 or 0 to represent true or false.
    char:
        Any single character. REMEMBER TO USE SINGLE QUOTATIONS
    
    Tuple (Defined tup) REMEMBER TUPLES ARE FIXED LENGTH:
        let tup = (value1, value2, value3)
        Types are weird with tuples. The type of above tuple is: (typeof(value1), typeof(value2), typeof(value3))

        To access elements of a tuple, use the dot operator: tup.0, tup.1, tup.2, etc.
        Or this: println!("The value of tup is: {:?}", tup);
    Array (Defined as Python's list) ALL MUST BE OF SAME TYPE. REMEMBER ARRAYS ARE ALSO FIXED LENGTH:
        REMEMBER THAT VALUES ARE NOT AUTOMATICALLY ASSIGNED.
        let arr: [(typeOfValuesStored; lengthOfArray)] = [value1, value2, value3]
        let arr: [i32; 5] = [1, 2, 3, 4, 5];

        To access elements of an array, use the square brackets: arr[0], arr[1], arr[2], etc.
        Or this: println!("The value of arr is: {:?}", arr);

Console Input:
Prelude: A bunch of functionality automatically added to every rust project.
Input is hard

Arithmetic and Type Casting:
You can use _'s in numbers to make them more readable: 127_000 is the same as 127000